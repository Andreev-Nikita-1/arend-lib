\import Category
\import Category.Limit
\import Category.Meta
\import CategoryLanguage.CartesianClosed
\import Data.List
\import Logic

\func abbaTest {Ct : CartesianPrecat} (A B : Ct) : Hom (Bprod A B) (Bprod B A) =>
  my_meta (\lam A B x => (x.2, x.1)) A B

\func assocTest (Ct : CartesianPrecat) (A B C : Ct) : Hom (Bprod A (Bprod B C)) (Bprod (Bprod A B) C) =>
  my_meta (\lam _ _ _ x => ((x.1, x.2.1), x.2.2)) A B C

\func idTest (Ct : CartesianPrecat) (A : Ct) : Hom A A =>
  my_meta (\lam A x => x) A

\func terminalTest (Ct : CartesianPrecat) (A : Ct) : Hom A terminal =>
  my_meta (\lam A1 x => ()) A

\func paramTest (Ct : CartesianPrecat) (A B C : Ct) (f : Hom Ct.terminal A) (g : Hom A B) (h : Hom B C) : Hom Ct.terminal C =>
  my_meta (\lam _ _ _ f g h _ => h (g (f ()))) A B C f g h

\func bindingsTest (Ct : CartesianPrecat) (A B : Nat -> Ct) (h : Nat -> Hom (A 0) (B 0)) : Hom (A 0) (Bprod (B 0) (A 0)) =>
  my_meta (\lam _ _ h x => (h x, x)) (A 0) (B 0) (h 0)

\func abbaEqTest {C : CartesianPrecat} (A B : C) : abbaTest A B `o` abbaTest B A = id _ =>
  my_meta idp

\func abbaEqTest' {C : CartesianPrecat} (A B : C) : C.proj2 `o` abbaTest A B = C.proj1 =>
  my_meta idp

\func idEqTest1 {C : CartesianPrecat} (A B : C) (h : Hom A B) : h `o` id _ = h =>
  my_meta idp

\func idEqTest2 {C : CartesianPrecat} (A B : C) (h : Hom A B) : id _ `o` h = h =>
  my_meta idp

\func terminalEqTest {C : CartesianPrecat} (A B : C) (h : Hom A B) : C.terminalMap `o` h = C.terminalMap =>
  my_meta idp

\func assocEqTest {Ct : CartesianPrecat} (A B C D : Ct) (f : Hom A B) (g : Hom B C) (h : Hom C D)
  : (h `o` g) `o` f  = h `o` (g `o` f) => my_meta idp

\func bindingsEqTest (Ct : CartesianPrecat) (A B : Nat -> Ct) (h : Nat -> Hom (A 0) (B 0))
  : h 0 `o` id _ = h 0 => my_meta idp

\func expTest1 {Ct : CartesianClosedPrecat} (A B C : Ct) : Hom (Bprod (exp A B) (exp B C)) (exp A C) =>
  my_meta (\lam A B C p => \lam x => p.2 (p.1 x)) A B C

\func expTest1' {Ct : CartesianClosedPrecat} (A B C : Ct) : Hom (exp A B) (exp (exp B C) (exp A C)) =>
    my_meta (\lam A B C p h a => h (p a)) A B C

\func expTest2 {Ct : CartesianClosedPrecat} (A B : Ct) : Hom (Bprod (exp A B) A) B =>
  my_meta (\lam A B p => p.1 p.2) A B

\func expTest3 {Ct : CartesianClosedPrecat} (A B C : Ct) : Hom (Bprod (exp A B) (exp A C)) (exp A (Bprod B C)) =>
  my_meta (\lam A B C p a => (p.1 a, p.2 a)) A B C

\func expTest4 {Ct : CartesianClosedPrecat} (A B C : Ct) : Hom (exp A (Bprod B C)) (Bprod (exp A B) (exp A C)) =>
  my_meta (\lam A B C p => (\lam a => (p a).1, \lam a => (p a).2)) A B C

\func expTest5 {Ct : CartesianClosedPrecat} (A B C : Ct) (h : Hom (Bprod C A) B) : Hom C (exp A B) =>
  my_meta (\lam A B C h c => \lam a => h (c, a)) A B C h

--  \let | obs => Fin 3
--       | obsMap => (!!) (A :: B :: C :: nil)
--       | mors : \Pi (dom : Type obs) (cod : Type obs) -> \Set => \lam dom cod => \case dom, cod \with {
--         | Prod (TParam 2) (TParam 0), TParam 1 => Fin 1
--         | _, _ => Empty
--       }
--       | morsMap : \Pi (dom : Type obs) (cod : Type obs) (n : mors dom cod) -> Ih obsMap dom cod =>
--         \lam dom cod n => \case dom, cod, n \with {
--           | Prod (TParam 2) (TParam 0), TParam 1, n => (h :: nil) !! n
--         }
--  \in I obsMap morsMap
--      (Lam {obs} {mors} {TParam {obs} 2} idp (Param {obs} {mors} {Prod {obs} (TParam {obs} 2) (TParam {obs} 0)} {TParam {obs} 1} 0 (Tuple {obs} {mors} {Prod {obs} (TParam {obs} 2) (TParam {obs} 0)} idp
--          (Proj1 {obs} {mors} {Prod {obs} (TParam {obs} 2) (TParam {obs} 0)} idp (Var {obs} {mors} {Prod {obs} (TParam {obs} 2) (TParam {obs} 0)} {Prod {obs} (TParam {obs} 2) (TParam {obs} 0)} idp))
--          (Proj2 {obs} {mors} {Prod {obs} (TParam {obs} 2) (TParam {obs} 0)} idp (Var {obs} {mors} {Prod {obs} (TParam {obs} 2) (TParam {obs} 0)} {Prod {obs} (TParam {obs} 2) (TParam {obs} 0)} idp)))))