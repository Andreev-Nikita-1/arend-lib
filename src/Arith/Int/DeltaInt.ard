\import Arith.Int
\import Paths

\data DeltaInt
  | delta  (a b : Nat)
  | cancel (a b : Nat) (i : I) \elim i {
    | left => delta a b
    | right => delta (suc a) (suc b)
  }
  \where {
    \func cancelDiamond (a b : Nat) (i : I)
      : cancel a b i = cancel (suc a) (suc b) i
      => \let | ab => cancel a b
              | sab => cancel (suc a) (suc b)
         \in coe (\lam i => ab i = sab i) (path ab) i
  }

\instance DeltaInteger : Integer DeltaInt
  | succ => isuc
  | pred => ipred
  | succPred => succ-pred
  | predSucc => pred-succ
  \where {
    \func isuc (i : DeltaInt) : DeltaInt
      | delta a b => delta (suc a) b
      | cancel a b i => cancel (suc a) b i

    \func ipred (i : DeltaInt) : DeltaInt
      | delta a b => delta a (suc b)
      | cancel a b i => cancel a (suc b) i

    \func succ-pred (i : DeltaInt) : isuc (ipred i) = i
      | delta a b => inv (DeltaInt.cancelDiamond a b left)
      | cancel a b i => inv (DeltaInt.cancelDiamond a b i)

    \func pred-succ (i : DeltaInt) : ipred (isuc i) = i
      | delta a b => succ-pred (delta a b)
      | cancel a b i => succ-pred (cancel a b i)
  }
