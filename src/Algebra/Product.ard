\import Algebra.Group
\import Algebra.Monoid
\import Paths.Meta

\instance MonoidProduct (A B : Monoid) : Monoid \cowith
  | E => \Sigma A B
  | ide => (A.ide, B.ide)
  | * p q => (p.1 * q.1, p.2 * q.2)
  | ide-left => rewrite A.ide-left (rewrite B.ide-left idp)
  | ide-right => rewrite A.ide-right (rewrite B.ide-right idp)
  | *-assoc => rewrite A.*-assoc (rewrite B.*-assoc idp)

\instance GroupProduct (A B : Group) : Group \cowith
  | Monoid => MonoidProduct A B
  | inverse (x, y) => (inverse x, inverse y)
  | inverse-left {x} => rewrite (A.inverse-left {x.1}) (rewrite (B.inverse-left {x.2}) idp)
  | inverse-right {x} => rewrite (A.inverse-right {x.1}) (rewrite (B.inverse-right {x.2}) idp)
