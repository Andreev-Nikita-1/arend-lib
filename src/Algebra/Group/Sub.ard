\import Algebra.Group
\import Algebra.Monoid
\import Meta
\import Paths.Meta

\record SubgroupData (G : Group) (\coerce P : G -> \Prop) {
  | ide-closed : P 1

  | /-closed {x y : G}: P x -> P y -> P (x / y)
  | inv-closed {x : G}: P x -> P (inverse x)
  | mult-closed {x y : G}: P x -> P y -> P (x * y)

  \default /-closed {x} {y} A B => mult-closed A (inv-closed B)
  \default inv-closed {x} A => rewriteF ide-left (/-closed ide-closed A)
  \default mult-closed {x} {y} A B => rewriteF (Group.inverse-inverse y) (unfold (/) (/-closed A (inv-closed B)))
}

\func Subgroup (G : Group) (d : SubgroupData G) : Group \cowith
  | E => \Sigma (g : G.E) (d g)
  | ide => (G.ide, ide-closed)
  | * p q => (p.1 * q.1, d.mult-closed p.2 q.2)
  | inverse p => (inverse p.1, d.inv-closed p.2)
  | *-assoc => ext *-assoc
  | ide-left => ext ide-left
  | inverse-left => ext inverse-left
