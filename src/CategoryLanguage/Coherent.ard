\import Category
\import Category.Limit
\import Category.Meta
\import CategoryLanguage.Regular
\import CategoryLanguage.Util
\import Paths
\import Paths.Meta

\class Bcoprod {C : Precat} (X Y : C) (\classifying apex : C) {
  | inl : Hom X apex
  | inr : Hom Y apex
  | map {Z : C} (f : Hom X Z) (g : Hom Y Z) : Hom apex Z
  | map-beta1 {Z : C} {f : Hom X Z} {g : Hom Y Z} : map f g `o` inl = f
  | map-beta2 {Z : C} {f : Hom X Z} {g : Hom Y Z} : map f g `o` inr = g
  | map-unique {Z : C} {f : Hom X Z} {g : Hom Y Z} {h h' : Hom apex Z} (p : \Sigma (h `o` inl = f) (h `o` inr = g))
               (p' : \Sigma (h' `o` inl = f) (h' `o` inr = g)) : h = h'
}

\class Initial {C : Precat} (\classifying apex : C) {
  | map {A : C} : Hom apex A
  | unique {A : C} {h1 h2 : Hom apex A} : h1 = h2
}

\class PrecatWithFiniteCoproducts \extends Precat {
  | initial : Initial {\this}
  | bcoprod (A B : Ob) : Bcoprod A B
}


\class CoherentPrecat \extends RegularPrecat {
  | subobj-cat-with-coproducts (A : Precat.Ob) : \let SubCat => subobj-cat A \in PrecatWithFiniteCoproducts {
    | Ob => Precat.Ob {SubCat}
    | Hom => Precat.Hom {SubCat}
    | id => Precat.id {SubCat}
    | o => Precat.o {SubCat}
    | id-left => Precat.id-left {SubCat}
    | id-right => Precat.id-right {SubCat}
    | o-assoc => Precat.o-assoc {SubCat}
  }

  | bcoprod-stability {A B : Precat.Ob} {f : Hom A B} {so so' : subobj-cat B} {so1 so1' : subobj-cat A}
                      (pb : Pullback so.2 f so1.1 {| pbProj2 => so1.2}) (pb' : Pullback so'.2 f so1'.1 {| pbProj2 => so1'.2})
  : Pullback (Bcoprod.apex {PrecatWithFiniteCoproducts.bcoprod {subobj-cat-with-coproducts B} so so'}).2 f {
    | apex => (Bcoprod.apex {PrecatWithFiniteCoproducts.bcoprod {subobj-cat-with-coproducts A} so1 so1'}).1
    | pbProj2 => (Bcoprod.apex {PrecatWithFiniteCoproducts.bcoprod {subobj-cat-with-coproducts A} so1 so1'}).2
  }

  | initial-stability {A B : Precat.Ob} {f : Hom A B} : Pullback (Initial.apex {PrecatWithFiniteCoproducts.initial {subobj-cat-with-coproducts B}}).2 f {
    | apex => (Initial.apex {PrecatWithFiniteCoproducts.initial {subobj-cat-with-coproducts A}}).1
    | pbProj2 => (Initial.apex {PrecatWithFiniteCoproducts.initial {subobj-cat-with-coproducts A}}).2
  }
}

\data Formula {TP : \Set} (P : Type TP -> Type TP -> \Set) (FP : Type TP -> \Set) (dom : Type TP)
  | Conj (Formula P FP dom) (Formula P FP dom)
  | Eq {T : Type TP} (Term P dom T) (Term P dom T)
  | FParam {dom' : Type TP} (FP dom') (Term P dom dom')
  | FTrue
  | FExists {dom' : Type TP} (Formula P FP (Prod dom' dom))
  | FFalse
  | Disj (Formula P FP dom) (Formula P FP dom)

\func IF {C : CoherentPrecat} {TP : \Set} {P : Type TP -> (Type TP) -> \Set} (TyF : TP -> C)
         (TeF : \Pi (ctx' : Type TP) -> \Pi (T' : Type TP) -> P ctx' T' -> Hom (IT TyF ctx') (IT TyF T'))
         {FP : Type TP -> \Set} (FF : \Pi(dom : Type TP) -> FP dom -> subobj (IT TyF dom))
         {dom : Type TP} (form : Formula P FP dom) : subobj (IT TyF dom) \elim form
  | Eq t t1 => \let e => C.equalizer (I TyF TeF t) (I TyF TeF t1) \in (e, Equalizer.eql {e}, \new Mono (Equalizer.eql {e}) (Equalizer.eqMono {e}))
  | Conj form1 form2 =>
    \let (sub, h, m) => IF TyF TeF FF form2
         | (sub1, h1, m1) => pullback-of-subobj h (IF TyF TeF FF form1) \in (sub1, h `o` h1, \new Mono {
      | isMono p => Mono.isMono {m1} (Mono.isMono {m} (inv o-assoc *> p *> o-assoc))
    })
  | FParam {dom'} x t => pullback-of-subobj (I TyF TeF t) (FF dom' x)
  | FTrue => (_, id _, \new Mono (id _) (inv id-left *> __ *> id-left))
  | FExists form => image-subobj (C.image (C.proj2 `o` (IF TyF TeF FF form).2))
  | FFalse => PrecatWithFiniteCoproducts.initial {C.subobj-cat-with-coproducts (IT TyF dom)}
  | Disj f1 f2 => PrecatWithFiniteCoproducts.bcoprod {C.subobj-cat-with-coproducts (IT TyF dom)} (IF TyF TeF FF f1) (IF TyF TeF FF f2)

\func substF {TP : \Set} {P : Type TP -> Type TP -> \Set} {FP : Type TP -> \Set} {dom dom' : Type TP}
             (form : Formula P FP dom) (term : Term P dom' dom) : Formula P FP dom' \elim form
  | Conj form1 form2 => Conj (substF form1 term) (substF form2 term)
  | Eq t t1 => Eq (subst t term) (subst t1 term)
  | FParam f t => FParam f (subst t term)
  | FTrue => FTrue
  | FExists {dom''} form => FExists (substF form (Tuple idp (Proj1 (Var idp)) (subst term (Proj2 (Var idp)))))
  | FFalse => FFalse
  | Disj form1 form2 => Disj (substF form1 term) (substF form2 term)

\func lemma-substF-subobjects  {C : CoherentPrecat} {TP : \Set} {P : Type TP -> (Type TP) -> \Set} {TyF : TP -> C}
                               {TeF : \Pi (ctx' : Type TP) -> \Pi (T' : Type TP) -> P ctx' T' -> Hom (IT TyF ctx') (IT TyF T')}
                               {FP : Type TP -> \Set} {FF : \Pi(dom : Type TP) -> FP dom -> subobj (IT TyF dom)}
                               {dom dom' : Type TP} (form : Formula P FP dom) (term : Term P dom' dom) =>
  (IF TyF TeF FF (substF form term), pullback-of-subobj (I TyF TeF term) (IF TyF TeF FF form))

\func lemma-substF {C : CoherentPrecat} {TP : \Set} {P : Type TP -> (Type TP) -> \Set} {TyF : TP -> C}
                   {TeF : \Pi (ctx' : Type TP) -> \Pi (T' : Type TP) -> P ctx' T' -> Hom (IT TyF ctx') (IT TyF T')}
                   {FP : Type TP -> \Set} {FF : \Pi(dom : Type TP) -> FP dom -> subobj (IT TyF dom)}
                   {dom dom' : Type TP} (form : Formula P FP dom) (term : Term P dom' dom)
  : bi-inclusion (IF TyF TeF FF (substF form term)) (pullback-of-subobj (I TyF TeF term) (IF TyF TeF FF form)) \elim form
  | Conj form1 form2 =>
    \let h => I TyF TeF term
         | ((l1, q1), (r1, s1)) => lemma-substF {C} {TP} {P} {TyF} {TeF} {FP} {FF} form1 term
         | ((l2, q2), (r2, s2)) => lemma-substF {C} {TP} {P} {TyF} {TeF} {FP} {FF} form2 term
         | (sub1, in1, mon1) => IF TyF TeF FF form1
         | (sub2, in2, mon2) => IF TyF TeF FF form2
         | pb => C.pullback in1 in2
         | pb1 => C.pullback in1 h
         | pb2 => C.pullback in2 h
         | pb' => C.pullback (Pullback.pbProj2 {pb1}) (Pullback.pbProj2 {pb2})
         | pb-of-pb => C.pullback (in2 `o` Pullback.pbProj2 {pb}) h
         | (sub1', in1', mon1') => IF TyF TeF FF (substF form1 term)
         | (sub2', in2', mon2') => IF TyF TeF FF (substF form2 term)
         | pb'' => C.pullback in1' in2' \in (
      \let
        x1 => Pullback.pbProj1 {pb1} `o` Pullback.pbProj1 {pb'}
        | x2 => Pullback.pbProj1 {pb2} `o` Pullback.pbProj2 {pb'}
        | p1 => pmap (`o` Pullback.pbProj1 {pb'}) (Pullback.pbCoh {pb1})
        | p2 => pmap (h `o`) (Pullback.pbCoh {pb'})
        | p3 => pmap (`o` Pullback.pbProj2 {pb'}) (Pullback.pbCoh {pb2})
        | p4 => p1 *> o-assoc *> p2 *> inv o-assoc *> inv p3
        | x3 => Pullback.pbMap {pb} x1 x2 (inv o-assoc *> p4 *> o-assoc)
        | p5 => pmap (in1 `o`) ((Pullback.pbBeta1 {pb}) {pb'} {x1} {x2} {inv o-assoc *> p4 *> o-assoc})
        | p6 => o-assoc *> p5 *> inv o-assoc *> p1 *> o-assoc
        | x4 => Pullback.pbMap {pb-of-pb} x3 (Pullback.pbProj2 {pb1} `o` Pullback.pbProj1 {pb'}) (rewriteI (Pullback.pbCoh {pb}) p6)
        | p7 => inv o-assoc *> pmap (`o` Pullback.pbProj1 {pb''}) q1 *> Pullback.pbCoh {pb''}
        | p8 => inv o-assoc *> pmap (`o` Pullback.pbProj2 {pb''}) q2
        | x5 => Pullback.pbMap {pb'} (l1 `o` Pullback.pbProj1 {pb''}) (l2 `o` Pullback.pbProj2 {pb''}) (p7 *> inv p8)
        | p11 => pmap (Pullback.pbProj2 {pb1} `o`) ((Pullback.pbBeta1 {pb'}) {pb''} {l1 `o` Pullback.pbProj1 {pb''}} {l2 `o` Pullback.pbProj2 {pb''}} {p7 *> inv p8})
        | p12 => rewrite q1 (p11 *> inv o-assoc)
      \in (x4 `o` x5, inv o-assoc *> pmap (`o` x5) Pullback.pbBeta2 *> o-assoc *> p12 *> Pullback.pbCoh {pb''}),
      \let x1 => (Pullback.pbMap {pb1}) (Pullback.pbProj1 {pb} `o` Pullback.pbProj1 {pb-of-pb}) (Pullback.pbProj2 {pb-of-pb})
          (inv o-assoc *> rewrite (Pullback.pbCoh {pb}) (Pullback.pbCoh {pb-of-pb}))
           | x2 => (Pullback.pbMap {pb2}) (Pullback.pbProj2 {pb} `o` Pullback.pbProj1 {pb-of-pb}) (Pullback.pbProj2 {pb-of-pb})
               (inv o-assoc *> Pullback.pbCoh {pb-of-pb})
           | p1 => Pullback.pbBeta2 {pb1} {pb-of-pb} {Pullback.pbProj1 {pb} `o` Pullback.pbProj1 {pb-of-pb}} {Pullback.pbProj2 {pb-of-pb}}
               {inv o-assoc *> rewrite (Pullback.pbCoh {pb}) (Pullback.pbCoh {pb-of-pb})}
           | p2 => Pullback.pbBeta2 {pb2} {pb-of-pb} {Pullback.pbProj2 {pb} `o` Pullback.pbProj1 {pb-of-pb}} {Pullback.pbProj2 {pb-of-pb}}
               {inv o-assoc *> Pullback.pbCoh {pb-of-pb}}
           | x3 => Pullback.pbMap {pb'} x1 x2 (p1 *> inv p2)
           | p3 => inv o-assoc *> pmap (`o` Pullback.pbProj1 {pb'}) s1
           | p4 => inv o-assoc *> pmap (`o` Pullback.pbProj2 {pb'}) s2
           | x4 => Pullback.pbMap {pb''} (r1 `o` Pullback.pbProj1 {pb'}) (r2 `o` Pullback.pbProj2 {pb'}) (p3 *> Pullback.pbCoh {pb'} *> inv p4)
           | p5 => o-assoc *> pmap (Pullback.pbProj2 {pb2} `o`) (Pullback.pbBeta2 {pb'} {pb-of-pb} {x1} {x2} {p1 *> inv p2}) *> p2
           | p6 => o-assoc *> pmap (Pullback.g {pb''} `o`) (Pullback.pbBeta2 {pb''} {pb'} {r1 `o` Pullback.pbProj1 {pb'}} {r2 `o` Pullback.pbProj2 {pb'}} {p3 *> Pullback.pbCoh {pb'} *> inv p4})
      \in (x4 `o` x3, inv o-assoc *> pmap (`o` x3) (p6 *> inv o-assoc *> pmap (`o` Pullback.pbProj2 {pb'}) s2) *> p5))
  | Eq t t1 => rewriteI (lemma-subst t1 term, lemma-subst t term) (
    \let h => I TyF TeF term
         | e => C.equalizer (I TyF TeF t C.∘ I TyF TeF term) (I TyF TeF t1 C.∘ I TyF TeF term)
         | e1 =>  C.equalizer (I TyF TeF t) (I TyF TeF t1)
         | pb => C.pullback (Equalizer.eql {e1}) h
    \in (
      \let x1 => Equalizer.eqMap {e1} (h `o` Equalizer.eql {e}) (inv o-assoc *> Equalizer.equal {e} *> o-assoc)
           | p1 => Equalizer.eqBeta {e1} (h `o` Equalizer.eql {e}) (inv o-assoc *> Equalizer.equal {e} *> o-assoc)
           | x2 => Pullback.pbMap {pb} x1 (Equalizer.eql {e}) p1
      \in (x2, Pullback.pbBeta2 {pb} {e} {x1} {Equalizer.eql {e}} {p1}),
      \let p1 => inv o-assoc *> pmap (`o` Pullback.pbProj1 {pb}) (Equalizer.equal {e1}) *> o-assoc
           | p2 => rewrite (Pullback.pbCoh {pb}) p1
           | x1 => Equalizer.eqMap {e} (Pullback.pbProj2 {pb}) (o-assoc *> p2 *> inv o-assoc) \in
        (x1, Equalizer.eqBeta {e} _ _)))
  | FParam {cod} f t => rewriteI (lemma-subst t term) (
    \let pb1 => C.pullback (FF cod f).2 (I TyF TeF t)
         | pb2 => C.pullback (Pullback.pbProj2 {pb1}) (I TyF TeF term)
         | pb3 => C.pullback (FF cod f).2 (I TyF TeF t `o` I TyF TeF term)
    \in (
      \let x1 => Pullback.pbMap {pb1} (Pullback.pbProj1 {pb3}) (Pullback.g {pb2} `o` Pullback.pbProj2 {pb3}) (Pullback.pbCoh {pb3} *> o-assoc)
           | p1 => Pullback.pbBeta2 {pb1} {pb3} {Pullback.pbProj1 {pb3}} {Pullback.g {pb2} `o` Pullback.pbProj2 {pb3}} {Pullback.pbCoh {pb3} *> o-assoc}
           | x2 => Pullback.pbMap {pb2} x1 Pullback.pbProj2 p1
      \in (x2, Pullback.pbBeta2),
      \let p1 => o-assoc *> pmap (Pullback.g {pb1} `o`) (Pullback.pbCoh {pb2}) *> inv o-assoc
           | p2 => inv o-assoc *> pmap (`o` Pullback.pbProj1 {pb2}) (Pullback.pbCoh {pb1}) *> p1
           | x1 => Pullback.pbMap {pb3} (Pullback.pbProj1 {pb1} `o` Pullback.pbProj1 {pb2}) (Pullback.pbProj2 {pb2}) p2
      \in (x1, Pullback.pbBeta2)))
  | FTrue =>
    \let pb => C.pullback (id (IT TyF dom)) (I TyF TeF term)
    \in((Pullback.pbMap {pb} (I TyF TeF term) (id _) (id-left *> inv id-right), Pullback.pbBeta2),
        (Pullback.pbProj2, id-left))
  | FExists {dom''} form =>
    \let (sub-f, in-f, mono-f) => IF TyF TeF FF form
         | It => I TyF TeF term
         | term' => Tuple idp (Proj1 (Var idp)) (subst term (Proj2 (Var idp)))
         | tpl-map => I TyF TeF term'
         | tpl-map' => C.pair (C.proj1 `o` id (C.Bprod (IT TyF dom'') _)) (It `o` (C.proj2 `o` id _))
         | eq => (\let xx => pmap (C.pair (C.proj1 `o` id (C.Bprod (IT TyF dom'') _)) __ )
             (lemma-subst {_}{_}{_}{_}{TeF} term (Proj2 (Var idp)))\in inv xx : tpl-map = tpl-map')
         | pb-f => C.pullback in-f tpl-map
         | (f-tpl, so-pb) => lemma-substF-subobjects {C} {TP} {P} {TyF} {TeF} {FP} {FF} form term'
         | (inc1, inc1') => lemma-substF {C} {TP} {P} {TyF} {TeF} {FP} {FF} form term'
         | img => C.image (C.proj2 `o` f-tpl.2)
         | img-pb => C.image (C.proj2 `o` so-pb.2)
         | (x1, x2) => image-lemma-subobjects (C.proj2 `o` f-tpl.2) (C.proj2 `o` so-pb.2) inc1.1 (o-assoc *> pmap (C.proj2 `o`) inc1.2)
         | img-inc-1 => image-lemma (C.proj2 `o` f-tpl.2) (C.proj2 `o` so-pb.2) inc1.1 (o-assoc *> pmap (C.proj2 `o`) inc1.2)
         | img-inc-1' => image-lemma (C.proj2 `o` so-pb.2) (C.proj2 `o` f-tpl.2) inc1'.1 (o-assoc *> pmap (C.proj2 `o`) inc1'.2)
         | pb-f' => pullback-lem pb-f eq
         | pb-big => pullback-lemma (prod-lemma (IT TyF dom'') It) pb-f'
         | img-pb-big => C.image (Pullback.pbProj2 {pb-big})
         | (_, x3) => image-lemma-subobjects (C.proj2 `o` so-pb.2) (Pullback.pbProj2 {pb-big}) (id _) id-right
         | img-inc-2 => image-lemma (C.proj2 `o` so-pb.2) (Pullback.pbProj2 {pb-big}) (id _) id-right
         | img-inc-2' => image-lemma (Pullback.pbProj2 {pb-big}) (C.proj2 `o` so-pb.2)  (id _) id-right
         | (h-im, is-pb) => C.image-stability (C.proj2 `o` in-f) It pb-big (C.image (C.proj2 `o` in-f)) (C.image (Pullback.pbProj2 {pb-big}))
         | pb-final => C.pullback (Image.in {C.image (CartesianPrecat.proj2 C.∘ (IF TyF TeF FF form).2)}) (I TyF TeF term)
         | so-final => pullback-of-subobj (I TyF TeF term) (\let img => C.image (CartesianPrecat.proj2 C.∘ (IF TyF TeF FF form).2) \in (img, Image.in {img}, Image.in-mono {img}))
         | t1 => subobj-inclusion-transitivity x1 x2 x3 img-inc-1 img-inc-2
         | t2 => subobj-inclusion-transitivity x1 x3 so-final t1 (Pullback.pbMap h-im x3.2 (Pullback.pbCoh {is-pb}), Pullback.pbBeta2)
         | t1' => subobj-inclusion-transitivity x3 x2 x1 img-inc-2' img-inc-1'
         | t2' => subobj-inclusion-transitivity so-final x3 x1 (Pullback.pbMap {is-pb} (Pullback.pbProj1 {pb-final}) (Pullback.pbProj2 {pb-final})
                                                                    (Pullback.pbCoh {pb-final}), Pullback.pbBeta2) t1'
    \in (t2, t2')
  | FFalse => pullback-def-to-inclusions C.initial-stability
  | Disj form1 form2 => pullback-def-to-inclusions
      (C.bcoprod-stability (inclusions-to-pullback-def (lemma-substF form1 term)) (inclusions-to-pullback-def (lemma-substF form2 term)))
  \where {
    \func image-lemma {C : RegularPrecat} {A A' B : C} (f : Hom A B) (f' : Hom A' B) (h : Hom A A') (p : f' `o` h = f)
      : \let img => C.image f |  img' => C.image f' \in subobj-inclusion (img, Image.in {img}, Image.in-mono {img}) (img', Image.in {img'}, Image.in-mono {img'}) =>
      \let img => C.image f |  img' => C.image f' \in Image.map (Image.in {img'}) (Image.in-mono {img'})
          (Image.im2 {img'} `o` h) (inv o-assoc *> rewrite (Image.im-comm {img'}) p)

    \func image-lemma-subobjects {C : RegularPrecat} {A A' B : C} (f : Hom A B) (f' : Hom A' B) (h : Hom A A') (p : f' `o` h = f) : \Sigma (subobj B) (subobj B) =>
      \let img => C.image f |  img' => C.image f' \in ((Image.im {img}, Image.in {img}, Image.in-mono {img}), (Image.im {img'}, Image.in {img'}, Image.in-mono {img'}))

    \func pullback-lem {C : RegularPrecat} {x y1 z1 : C} {f : Hom x z1} {g g' : Hom y1 z1} (pb : Pullback f g) (p : g = g') : Pullback f g' pb pb.pbProj1 pb.pbProj2  \elim p
      | idp => pb

    \func prod-lemma {C : CartesianPrecat} (A : C) {B B' : C} (h : Hom B B')
      : Pullback (C.proj2 {A} {B'}) h (C.Bprod A B) (C.pair (C.proj1 `o` id (C.Bprod A B)) (h `o` (C.proj2 `o` id _))) (C.proj2 {A} {B}) \cowith
      | pbCoh => rewrite (C.beta2, id-right) idp
      | pbMap {w} h1 h2 q => Product.tupleMap {Bprod A B} (\case \elim __ \with {
        | 0 => C.proj1 `o` h1
        | 1 => h2
      })
      | pbBeta1 {_}{_}{_}{p} => rewrite (C.pair-comp, id-right, C.beta1, id-right, o-assoc, C.beta2, inv p, inv C.pair-comp, C.pair-proj) id-left
      | pbBeta2 => rewrite C.beta2 idp
      | pbEta {_}{h1}{h2} p q => \let q' => rewrite (id-right, id-right) p | q'' => rewrite C.beta1 (o-assoc *> pmap (C.proj1 `o`) q' *> inv o-assoc) \in C.pair-unique q'' q
  }

\data Proof {TP : \Set} {P : Type TP -> Type TP -> \Set} {dom : Type TP} {FP : Type TP -> \Set}
            (PP : \Pi(dom : Type TP) -> Formula P FP dom -> Formula P FP dom -> \Set) (hyp f : Formula P FP dom)
  | idProof (hyp = f)
  | transProof {f' : Formula P FP dom} (Proof PP hyp f') (Proof PP f' f)
  | substProof {dom' : Type TP} {term : Term P dom dom'} {hyp' f' : Formula P FP dom'}
               (hyp = substF hyp' term) (f = substF f' term) (Proof PP hyp' f')
  | reflProof {cod : Type TP} {a : Term P dom cod} (f = Eq a a)
  | transportProof {dom' : Type TP} {a a' : Term P dom dom'} {f' : Formula P FP (Prod dom dom')}
                   (f = substF f' (Tuple idp (Var idp) a')) (Proof PP hyp (Eq a a')) (Proof PP hyp (substF f' (Tuple idp (Var idp) a)))
  | concatProof {cod : Type TP} (a b c : Term P dom cod) (f = Eq a c) (Proof PP hyp (Eq a b)) (Proof PP hyp (Eq b c))
  | pmapProof {mid cod : Type TP} {a b : Term P dom mid} (h : Term P (Prod dom mid) cod)
              (f = Eq (subst h (Tuple idp (Var idp) a)) (subst h (Tuple idp (Var idp) b))) (Proof PP hyp (Eq a b))
  | invProof {cod : Type TP} {a b : Term P dom cod} (f = Eq a b) (Proof PP hyp (Eq b a))
  | proj1Proof {f2 : Formula P FP dom} (hyp = Conj f f2)
  | proj2Proof {f1 : Formula P FP dom} (hyp = Conj f1 f)
  | tupleProof {f1 f2 : Formula P FP dom} (f = Conj f1 f2) (Proof PP hyp f1) (Proof PP hyp f2)
  | paramProof (PP dom hyp f)
  | trueProof (f = FTrue)
  | existsProof1 {dom' dom'' : Type TP} {f' : Formula P FP dom''} (p : dom = Prod dom' dom'')
                 (f = rewrite p (substF f' (Proj2 {_}{_}{_}{_}{dom'} (Var idp)))) (q : Proof PP (FExists (rewriteI p hyp)) f')
  | existsProof2 {dom' : Type TP} {hyp' : Formula P FP (Prod dom' dom)} (hyp = FExists hyp') (Proof PP hyp' (substF f (Proj2 {_}{_}{_}{_}{dom'} (Var idp))))
  | existsProofSubst {dom' : Type TP} {t : Term P dom dom'} {f' : Formula P FP (Prod dom' dom)} (hyp = substF f' (Tuple idp t (Var idp))) (f = FExists f')
  | existsProofExtra {dom' : Type TP} {f' : Formula P FP (Prod dom' dom)} {h : Formula P FP dom}
                     (hyp = Conj (FExists f') h)
                     (f = FExists (Conj f' (substF h (Proj2 {_}{_}{_}{_}{dom'} (Var idp)))))
  | disjLeft {f' : Formula P FP dom} (f = Disj hyp f')
  | disjRight {f' : Formula P FP dom} (f = Disj f' hyp)
  | disjHyp {hyp' hyp'' : Formula P FP dom} (hyp = Disj hyp' hyp'') (Proof PP hyp' f) (Proof PP hyp'' f)
  | deMorganExtra {f1 f2 f3 : Formula P FP dom}
                  (hyp = Conj (Disj f1 f2) f3) (f = Disj (Conj f1 f3) (Conj f2 f3))
  | absurdProof (hyp = FFalse)

\func absurdProof' {SP : \Set} {TP : Type SP -> Type SP -> \Set} {dom : Type SP} {FP : Type SP -> \Set}
                   {PP : \Pi(dom : Type SP) -> Formula TP FP dom -> Formula TP FP dom -> \Set}
                   {hyp : Formula TP FP dom} (f : Formula TP FP dom) (p : Proof PP hyp FFalse) : Proof PP hyp f => transProof p (absurdProof idp)


\func proj1Proof' {SP : \Set} {TP : Type SP -> Type SP -> \Set} {dom : Type SP} {FP : Type SP -> \Set}
                  {PP : \Pi(dom : Type SP) -> Formula TP FP dom -> Formula TP FP dom -> \Set}
                  {hyp f f' : Formula TP FP dom} (p : Proof PP hyp (Conj f f')) : Proof PP hyp f => transProof p (proj1Proof idp)

\func proj2Proof' {SP : \Set} {TP : Type SP -> Type SP -> \Set} {dom : Type SP} {FP : Type SP -> \Set}
                  {PP : \Pi(dom : Type SP) -> Formula TP FP dom -> Formula TP FP dom -> \Set}
                  {hyp f f' : Formula TP FP dom} (p : Proof PP hyp (Conj f f')) : Proof PP hyp f' => transProof p (proj2Proof idp)


\func proofParam {SP : \Set} {TP : Type SP -> Type SP -> \Set} {dom0 dom : Type SP} {FP : Type SP -> \Set}
                 {PP : \Pi(dom : Type SP) -> Formula TP FP dom -> Formula TP FP dom -> \Set} {hyp0 : Formula TP FP dom0}
                 (hyp f : Formula TP FP dom)
                 (n : PP dom hyp f) (t : Term TP dom0 dom) (p : Proof PP hyp0 (substF hyp t)) : Proof PP hyp0 (substF f t)
  => transProof p (substProof idp idp (paramProof n))

\func conjSymLemma {SP : \Set} {TP : Type SP -> Type SP -> \Set} {dom : Type SP} {FP : Type SP -> \Set}
                   {PP : \Pi(dom : Type SP) -> Formula TP FP dom -> Formula TP FP dom -> \Set}
                   (f g : Formula TP FP dom) : Proof PP (Conj f g) (Conj g f) =>
  tupleProof idp (proj2Proof idp) (proj1Proof idp)


\func existsLemma {SP : \Set} {TP : Type SP -> Type SP -> \Set} {dom dom' : Type SP} {FP : Type SP -> \Set}
                  {PP : \Pi(dom : Type SP) -> Formula TP FP dom -> Formula TP FP dom -> \Set}
                  (f : Formula TP FP (Prod dom' dom)) (g : Formula TP FP dom)
  : Proof PP (Conj (FExists f) g) (FExists (Conj f (substF g (Proj2 {_}{_}{_}{_}{dom'} (Var idp))))) => existsProofExtra idp idp

\func recExistsProof {SP : \Set} {TP : Type SP -> Type SP -> \Set} {dom dom' : Type SP} {FP : Type SP -> \Set}
                     {PP : \Pi(dom : Type SP) -> Formula TP FP dom -> Formula TP FP dom -> \Set} {hyp : Formula TP FP dom}
                     (f : Formula TP FP dom)
                     (f' : Formula TP FP (Prod dom' dom))
                     (ep : Proof PP hyp (FExists f'))
                     (p : Proof PP (Conj f' (substF hyp (Proj2 {_}{_}{_}{_}{dom'} (Var idp)))) (substF f (Proj2 {_}{_}{_}{_}{dom'} (Var idp))))
  : Proof PP hyp f => transProof (transProof (tupleProof idp ep (idProof idp)) (existsLemma f' hyp))
    (existsProof2 idp p)

\func existsConsProof {SP : \Set} {TP : Type SP -> Type SP -> \Set} {dom dom' : Type SP} {FP : Type SP -> \Set}
                      {PP : \Pi(dom : Type SP) -> Formula TP FP dom -> Formula TP FP dom -> \Set} {hyp : Formula TP FP dom}
                      (f' : Formula TP FP (Prod dom' dom)) (t : Term TP dom dom')
                      (p : Proof PP hyp (substF f' (Tuple idp t (Var idp)))) : Proof PP hyp (FExists f') =>
  transProof p (existsProofSubst idp idp)


\func inlProof {SP : \Set} {TP : Type SP -> Type SP -> \Set} {FP : Type SP -> \Set}
               {PP : \Pi(dom : Type SP) -> Formula TP FP dom -> Formula TP FP dom -> \Set}
               {dom : Type SP} {hyp f : Formula TP FP dom} (f' : Formula TP FP dom) (p : Proof PP hyp f) : Proof PP hyp (Disj f f') =>
  transProof p (disjLeft idp)

\func inrProof {SP : \Set} {TP : Type SP -> Type SP -> \Set} {FP : Type SP -> \Set}
               {PP : \Pi(dom : Type SP) -> Formula TP FP dom -> Formula TP FP dom -> \Set}
               {dom : Type SP} {hyp f' : Formula TP FP dom} (f : Formula TP FP dom) (p : Proof PP hyp f') : Proof PP hyp (Disj f f') =>
  transProof p (disjRight idp)

\func deMorganLemma {SP : \Set} {TP : Type SP -> Type SP -> \Set} {FP : Type SP -> \Set}
                    {PP : \Pi(dom : Type SP) -> Formula TP FP dom -> Formula TP FP dom -> \Set}
                    {dom : Type SP} {hyp0 hyp hyp' : Formula TP FP dom}
  : Proof PP (Conj (Disj hyp hyp') hyp0) (Disj (Conj hyp hyp0) (Conj hyp' hyp0)) => deMorganExtra idp idp

\func recDisjProof {SP : \Set} {TP : Type SP -> Type SP -> \Set} {FP : Type SP -> \Set}
                   {PP : \Pi(dom : Type SP) -> Formula TP FP dom -> Formula TP FP dom -> \Set}
                   {dom : Type SP} {hyp0 hyp hyp' f : Formula TP FP dom}
                   (p0 : Proof PP hyp0 (Disj hyp hyp')) (p : Proof PP (Conj hyp hyp0) f) (p' : Proof PP (Conj hyp' hyp0) f)
  : Proof PP hyp0 f => transProof (transProof (tupleProof idp p0 (idProof idp)) (deMorganLemma)) (disjHyp idp p p')

\func IP
  {C : CoherentPrecat} {TP : \Set} {P : Type TP -> (Type TP) -> \Set} (TyF : TP -> C)
  (TeF : \Pi (ctx' : Type TP) -> \Pi (T' : Type TP) -> P ctx' T' -> Hom (IT TyF ctx') (IT TyF T'))
  {FP : Type TP -> \Set} (FF : \Pi(dom : Type TP) -> FP dom -> subobj (IT TyF dom))
  {dom : Type TP} {PP : \Pi(dom : Type TP) -> Formula P FP dom ->  Formula P FP dom -> \Set}
  (PF : \Pi(dom : Type TP) -> \Pi(hyp form : Formula P FP dom) -> PP dom hyp form -> subobj-inclusion (IF TyF TeF FF hyp) (IF TyF TeF FF form))
  {hyp form : Formula P FP dom} (proof : Proof PP hyp form) : subobj-inclusion (IF TyF TeF FF hyp) (IF TyF TeF FF form) \elim proof
  | idProof p => rewrite p (id _, id-right)
  | transProof proof1 proof2 =>
    subobj-inclusion-transitivity _ _ _ (IP TyF TeF FF PF proof1) (IP TyF TeF FF PF proof2)
  | substProof {dom'} {term} {hyp'} {form'} p p1 proof => rewrite (p, p1) (
    \let h => I TyF TeF term
         | (in, p) => IP TyF TeF FF PF proof
         | pb1 => C.pullback (IF TyF TeF FF hyp').2 h
         | pb2 => C.pullback (IF TyF TeF FF form').2 h
         | x => Pullback.pbMap {pb2} (in `o` Pullback.pbProj1 {pb1}) (Pullback.pbProj2 {pb1}) (inv o-assoc *> rewrite p (Pullback.pbCoh {pb1}))
         | p1 => (Pullback.pbBeta2 {pb2}) {pb1} {in `o` Pullback.pbProj1 {pb1}} {Pullback.pbProj2 {pb1}} {inv o-assoc *> rewrite p (Pullback.pbCoh {pb1})}
         | (a, a') => lemma-substF-subobjects {C} {TP} {P} {TyF} {TeF} {FP} {FF} hyp' term
         | (b, b') => lemma-substF-subobjects {C} {TP} {P} {TyF} {TeF} {FP} {FF} form' term
         | in' => subobj-inclusion-transitivity a a' b' (lemma-substF {C} {TP} {P} {TyF} {TeF} {FP} {FF} hyp' term).1 (x, p1)
         | in'' => subobj-inclusion-transitivity a b' b in' (lemma-substF {C} {TP} {P} {TyF} {TeF} {FP} {FF} form' term).2
    \in in'')
  | reflProof {cod} {a} p => rewrite p (inclusion-to-equalizer-lemma' idp)
  | transportProof {dom'} {a} {a'} {f'} p eqProof proof => rewrite p (
    \let Ia => I TyF TeF (Tuple idp (Var idp) a)
         | Ia' => I TyF TeF (Tuple idp (Var idp) a')
         | pb1 => C.pullback (IF TyF TeF FF f').2 Ia
         | pb2 => C.pullback (IF TyF TeF FF f').2 Ia'
         | si1 => IP TyF TeF FF PF proof
         | Ia=Ia' => pmap (C.pair (id _ `o` (IF TyF TeF FF hyp).2) __) (inclusion-to-equalizer-lemma (IP TyF TeF FF PF eqProof))
         | (_, hypIn, _) => IF TyF TeF FF hyp
         | (x, x') => lemma-substF-subobjects {C} {TP} {P} {TyF} {TeF} {FP} {FF} f' (Tuple idp (Var idp) a)
         | (y, y') => lemma-substF-subobjects {C} {TP} {P} {TyF} {TeF} {FP} {FF} f' (Tuple idp (Var idp) a')
         | (in1, p1) => subobj-inclusion-transitivity _ x x' si1 (lemma-substF {C} {TP} {P} {TyF} {TeF} {FP} {FF} f' (Tuple idp (Var idp) a)).1
         | in2 => Pullback.pbMap {pb2} (Pullback.pbProj1 {pb1} `o` in1) hypIn (inv o-assoc *> rewrite (Pullback.pbCoh {pb1}) (o-assoc *> rewrite p1 (C.pair-comp *> Ia=Ia' *> inv C.pair-comp)))
         | p2 => Pullback.pbBeta2 {pb2} {_} {Pullback.pbProj1 {pb1} `o` in1} {hypIn} {inv o-assoc *> rewrite (Pullback.pbCoh {pb1}) (o-assoc *> rewrite p1 (C.pair-comp *> Ia=Ia' *> inv C.pair-comp))}
    \in subobj-inclusion-transitivity _ y' y (in2, p2) (lemma-substF {C} {TP} {P} {TyF} {TeF} {FP} {FF} f' (Tuple idp (Var idp) a')).2)
  | concatProof {cod} a b c p proof1 proof2 => rewrite p (
    \let q => inclusion-to-equalizer-lemma (IP TyF TeF FF PF proof1)
         | q' => inclusion-to-equalizer-lemma (IP TyF TeF FF PF proof2)
    \in inclusion-to-equalizer-lemma' (q *> q'))
  | pmapProof {mid} {cod} {a} {b} h p proof => rewrite (p, inv (lemma-subst h (Tuple idp (Var idp) a)), inv (lemma-subst h (Tuple idp (Var idp) b)))(
    \let q => pmap (\lam xx => I TyF TeF h `o` C.pair (id _ `o` (IF TyF TeF FF hyp).2) xx) (inclusion-to-equalizer-lemma (IP TyF TeF FF PF proof))
    \in inclusion-to-equalizer-lemma' (o-assoc *>  (pmap (I TyF TeF h `o`) C.pair-comp *> q *> pmap (I TyF TeF h `o`) (inv C.pair-comp))  *> inv o-assoc))
  | invProof p proof => rewrite p (
    \let q => inclusion-to-equalizer-lemma (IP TyF TeF FF PF proof)
    \in inclusion-to-equalizer-lemma' (inv q))
  | proj1Proof {f2} p => rewrite p (
    \let pb => C.pullback (IF TyF TeF FF form).2 (IF TyF TeF FF f2).2 \in (Pullback.pbProj1 {pb}, Pullback.pbCoh {pb}))
  | proj2Proof {f1} p => rewrite p (
    \let pb => C.pullback (IF TyF TeF FF f1).2 (IF TyF TeF FF form).2 \in (Pullback.pbProj2 {pb}, idp)
  )
  | tupleProof {f1} {f2} p proof1 proof2 => rewrite p (
    \let pb => C.pullback (IF TyF TeF FF f1).2 (IF TyF TeF FF f2).2
         | (in1, p1) => IP TyF TeF FF PF proof1
         | (in2, p2) => IP TyF TeF FF PF proof2
         | q => o-assoc *> pmap ((IF TyF TeF FF f2).2 `o`) (Pullback.pbBeta2 {pb} {_} {in1} {in2} {p1 *> inv p2})
    \in (Pullback.pbMap {pb} in1 in2 (p1 *> inv p2),
         q *> p2))
  | paramProof p => PF dom hyp form p
  | trueProof p => rewrite p ((IF TyF TeF FF hyp).2, id-left)
  | existsProof1 {dom'} {dom''} {f'} p p1 proof => rewrite p1 (exists-lem1 {C}{TP}{P}{TyF}{TeF}{FP}{FF}{dom}{PP}{PF}{dom'}{dom''}{form}{hyp}{p}{f'}{p1}{proof})
  | existsProof2 {dom'} {hyp'} p proof => rewrite p (
    \let (in1, in2) => lemma-substF {C}{TP}{P}{TyF}{TeF}{FP}{FF} form (Proj2 {_}{_}{_}{_}{dom'} (Var idp))
         | in3 => IP TyF TeF FF PF proof
         | Iproj2 => I TyF TeF (Proj2 {_}{_}{_}{_}{dom'} (Var idp))
         | If => IF TyF TeF FF form
         | Ih' => IF TyF TeF FF hyp'
         | pb => C.pullback If.2 Iproj2
         | img => C.image (C.proj2 `o` Ih'.2)
         | x => Image.map {img} If.2 If.3 (Pullback.pbProj1 {pb} `o` in1.1 `o` in3.1) (inv o-assoc *> rewriteI (o-assoc, inv (Pullback.pbCoh {pb}))
                                                                                                                 (o-assoc *> o-assoc *> o-assoc *> pmap (C.proj2 `o`) (id-left *> inv o-assoc *> pmap (`o` in3.1) in1.2 *> in3.2)))
    \in x)
  | existsProofSubst {dom'} {t} {f'} p p1 => rewrite (p, p1) (
    \let
      | (in1, in2) => lemma-substF {C}{TP}{P}{TyF}{TeF}{FP}{FF} f' (Tuple idp t (Var idp))
      | (x1, x2) => lemma-substF-subobjects {C}{TP}{P}{TyF}{TeF}{FP}{FF} f' (Tuple idp t (Var idp))
      | If' => IF TyF TeF FF f'
      | Itpl => I TyF TeF (Tuple idp t (Var idp))
      | pb => C.pullback If'.2 Itpl
      | img => C.image (C.proj2 `o` If'.2)
    \in subobj-inclusion-transitivity x1 x2 (IF TyF TeF FF (FExists f')) in1 (Image.im2 {img} `o` Pullback.pbProj1 {pb},
                                                                             inv o-assoc *> rewrite (Image.im-comm {img}) (o-assoc *> rewrite (Pullback.pbCoh {pb}) (inv o-assoc *> rewrite C.beta2 id-left))))
  | disjLeft p => rewrite p (Bcoprod.inl {PrecatWithFiniteCoproducts.bcoprod {C.subobj-cat-with-coproducts _} _ _})
  | disjRight p => rewrite p (Bcoprod.inr {PrecatWithFiniteCoproducts.bcoprod {C.subobj-cat-with-coproducts _} _ _})
  | disjHyp p proof1 proof2 => rewrite p (Bcoprod.map {PrecatWithFiniteCoproducts.bcoprod {C.subobj-cat-with-coproducts _} _ _} (IP TyF TeF FF PF proof1) (IP TyF TeF FF PF proof2))
  | absurdProof p => rewrite p (Initial.map {PrecatWithFiniteCoproducts.initial {C.subobj-cat-with-coproducts _}})
  | existsProofExtra p p1 => {?}
  | deMorganExtra p p1 => {?}


  \where {
    \func inclusion-to-equalizer-lemma {C : FinCompletePrecat} {x y : C} {f g : Hom x y} {so : subobj x}
                                       (in : subobj-inclusion so (C.equalizer f g, Equalizer.eql {C.equalizer f g}, \new Mono (Equalizer.eql {C.equalizer f g}) (Equalizer.eqMono {C.equalizer f g})))
      : f `o` so.2 = g `o` so.2 =>
      rewriteI in.2 (inv o-assoc *> pmap (`o` in.1) (Equalizer.equal {C.equalizer f g}) *> o-assoc)

    \func inclusion-to-equalizer-lemma' {C : FinCompletePrecat} {x y : C} {f g : Hom x y} {so : subobj x} (p : f `o` so.2 = g `o` so.2)
      : subobj-inclusion so (C.equalizer f g, Equalizer.eql {C.equalizer f g}, \new Mono (Equalizer.eql {C.equalizer f g}) (Equalizer.eqMono {C.equalizer f g})) =>
      \let e => C.equalizer f g \in (Equalizer.eqMap {e} so.2 p, Equalizer.eqBeta {e} so.2 p)

    \func exists-lem1 {C : CoherentPrecat} {TP : \Set} {P : Type TP -> Type TP -> \Set}
                      {TyF : TP -> C} {TeF : \Pi (ctx' : Type TP) -> \Pi (T' : Type TP) -> P ctx' T' -> C.Hom (IT TyF ctx') (IT TyF T')}
                      {FP : Type TP -> \Set} {FF : \Pi (dom : Type TP) -> FP dom -> subobj (IT TyF dom)}
                      {dom : Type TP} {PP : \Pi (dom : Type TP) -> Formula P FP dom -> Formula P FP dom -> \Set}
                      {PF : \Pi (dom : Type TP) -> \Pi (hyp form : Formula P FP dom) -> PP dom hyp form -> subobj-inclusion (IF TyF TeF FF hyp) (IF TyF TeF FF form)}
                      {dom' : Type TP} {dom'' : Type TP} {form : Formula P FP dom} {hyp : Formula P FP dom} {p : dom = Prod dom' dom''}
                      {f' : Formula P FP dom''} {p1 : form = transportInv (Formula P FP) p (substF f' (Proj2 (Var idp)))}
                      {proof : Proof PP (FExists (transport (Formula P FP) p hyp)) f'}
      : subobj-inclusion (IF TyF TeF FF hyp) (IF TyF TeF FF (transportInv (Formula P FP) p (substF f' (Proj2 (Var idp))))) \elim p
      | idp =>
        \let (in1, in2) => lemma-substF {C}{TP}{P}{TyF}{TeF}{FP}{FF} f' (Proj2 {_}{_}{_}{_}{dom'} (Var idp))
             | in3 => IP TyF TeF FF PF proof
             | Iproj2 => I TyF TeF (Proj2 {_}{_}{_}{_}{dom'} (Var idp))
             | If' => IF TyF TeF FF f'
             | pb => C.pullback If'.2 Iproj2
             | img => C.image (CartesianPrecat.proj2 C.∘ (IF TyF TeF FF hyp).2)
             | x => Pullback.pbMap {pb} (in3.1 `o` Image.im2 {img}) (IF TyF TeF FF hyp).2 (rewrite id-right (inv o-assoc *> rewrite in3.2 idp *> Image.im-comm {img}))
        \in subobj-inclusion-transitivity _ (pullback-of-subobj Iproj2 If') _ (x, Pullback.pbBeta2) in2
  }

