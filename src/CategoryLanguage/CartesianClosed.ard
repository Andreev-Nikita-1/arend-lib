\import Category
\import Category.Limit
\import Data.Bool
\import Data.List
\import Logic
\import Meta
\import Paths
\import Paths.Meta

\data Type (P : \Set)
  | TParam P
  | Prod (Type P) (Type P)
  | Unit
  | Arr (Type P) (Type P)

\data Term {TP : \Set} (P : Type TP -> Type TP -> \Set) (ctx : Type TP) (T : Type TP)
  | Tuple {A B : Type TP} (T = Prod A B) (Term P ctx A) (Term P ctx B)
  | unit (T = Unit)
  | Proj1 {S TS : Type TP} (TS = Prod T S) (Term P ctx TS)
  | Proj2 {S ST : Type TP} (ST = Prod S T) (Term P ctx ST)
  | Param {d : Type TP} (P d T) (Term P ctx d)
  | Var (T = ctx)
  | App {mid : Type TP} (Term P ctx (Arr mid T)) (Term P ctx mid)
  | Lam {s t : Type TP} (T = Arr s t) (Term P (Prod ctx s) t)

\func IT {C : CartesianClosedPrecat} {P : \Set} (f : P -> C) (T : Type P) : C \elim T
  | TParam p => f p
  | Prod T1 T2 => C.Bprod (IT f T1) (IT f T2)
  | Unit => C.terminal
  | Arr T1 T2 => C.exp (IT f T1) (IT f T2)

\func I {C : CartesianClosedPrecat} {TP : \Set} {P : Type TP -> (Type TP) -> \Set} (tf : TP -> C)
        (f : \Pi (ctx' : Type TP) -> \Pi (T' : Type TP) -> P ctx' T' -> Hom (IT tf ctx') (IT tf T'))
        {ctx : Type TP} {T : Type TP} (term : Term P ctx T)
  : Hom (IT tf ctx) (IT tf T) \elim term
  | Tuple p term1 term2 => rewrite p (C.pair (I tf f term1) (I tf f term2))
  | unit p => rewrite p C.terminalMap
  | Proj1 p term => transportInv (\lam x0 => Hom (IT tf x0) (IT tf T)) p C.proj1 `o` I tf f term
  | Proj2 p term => transportInv (\lam x0 => Hom (IT tf x0) (IT tf T)) p C.proj2 `o` I tf f term
  | Param {d} p term => f d T p `o` I tf f term
  | Var p => rewrite p (C.id (IT tf ctx))
  | App g x => C.ev `o` C.pair (I tf f g) (I tf f x)
  | Lam p t => rewrite p (C.lam (I tf f t))

\func Ih {C : CartesianClosedPrecat} {P : \Set} (f : P -> C) (D C : Type P) => Hom (IT f D) (IT f C)

\data Mor {OP : \Set} (P : Type OP -> Type OP -> \Set) (dom cod : Type OP) =>
  | Id (cod = dom)
  | MParam (P dom cod)
  | Comp {mid : Type OP} (Mor P mid cod) (Mor P dom mid)
  | TerminalMap (cod = Unit)
  | TupleMap {A B : Type OP} (cod = Prod A B) (Mor P dom A) (Mor P dom B)
  | Proj1Map {B : Type OP} (dom = Prod cod B)
  | Proj2Map {A : Type OP} (dom = Prod A cod)
  | LamMap {dom' cod' : Type OP} (cod = Arr dom' cod') (Mor P (Prod dom dom') cod')
  | EvMap {A : Type OP} (dom = Prod (Arr A cod) A)

\func IM {C : CartesianClosedPrecat} {TP : \Set} {P : Type TP -> (Type TP) -> \Set} (tf : TP -> C)
         (f : \Pi (ctx' : Type TP) -> \Pi (T' : Type TP) -> P ctx' T' -> Hom (IT tf ctx') (IT tf T'))
         {dom cod : Type TP} (mor : Mor P dom cod)
  : Hom (IT tf dom) (IT tf cod) \elim mor
  | Id p => rewrite p (C.id (IT tf dom))
  | MParam p => f dom cod p
  | Comp mor1 mor2 => IM tf f mor1 âˆ˜ IM tf f mor2
  | TerminalMap p => rewrite p C.terminalMap
  | TupleMap p mor1 mor2 => rewrite p (C.pair (IM tf f mor1) (IM tf f mor2))
  | Proj1Map p => rewrite p C.proj1
  | Proj2Map p => rewrite p C.proj2
  | LamMap p t => rewrite p (C.lam (IM tf f t))
  | EvMap p => rewrite p C.ev

\func BigProd {OP : \Set} (dom : Type OP) (list : List (Type OP)) : Type OP \elim list
  | nil => dom
  | :: a list => Prod (BigProd dom list) a

\func BigProj1 {OP : \Set} {P : Type OP -> Type OP -> \Set} {dom0 dom1 dom2 : Type OP} (list : List (Type OP))
               (m : Term P dom0 (BigProd (Prod dom1 dom2) list))
  : Term P dom0 (BigProd dom1 list) \elim list
  | nil => Proj1 idp m
  | :: a list =>
    Tuple idp (BigProj1 list (Proj1 idp m)) (Proj2 idp m)

\func BigProj1' {OP : \Set} {P : Type OP -> Type OP -> \Set} {dom1 dom2 : Type OP} (list : List (Type OP))
  : Term P (BigProd (Prod dom1 dom2) list) (BigProd dom1 list) => BigProj1 list (Var idp)

\func substProj1 {OP : \Set} {P : Type OP -> Type OP -> \Set} {dom cod : Type OP} (s : Type OP) (list : List (Type OP))
                 (m : Term P (BigProd dom list) cod)
  : Term P (BigProd (Prod dom s) list) cod \elim m
  | Tuple p m1 m2 => Tuple p (substProj1 s list m1) (substProj1 s list m2)
  | unit p => unit p
  | Proj1 p m => Proj1 p (substProj1 s list m)
  | Proj2 p m => Proj2 p (substProj1 s list m)
  | Param p m => Param p (substProj1 s list m)
  | Var p => rewrite p (BigProj1' list)
  | App m1 m2 => App (substProj1 s list m1) (substProj1 s list m2)
  | Lam {s1} {t} p m => Lam p (substProj1 s (s1 :: list) m)

\func subst {OP : \Set} {P : Type OP -> Type OP -> \Set} {dom mid cod : Type OP} (m1 : Term P mid cod) (m2 : Term P dom mid)
  : Term P dom cod \elim m1
  | Tuple p m1 m1' => Tuple p (subst m1 m2) (subst m1' m2)
  | unit p => unit p
  | Proj1 p m1 => Proj1 p (subst m1 m2)
  | Proj2 p m1 => Proj2 p (subst m1 m2)
  | Param p m1 => Param p (subst m1 m2)
  | Var p => rewrite p m2
  | App m1 m3 => App (subst m1 m2) (subst m3 m2)
  | Lam {s} {t} p tm => Lam p (subst tm (Tuple idp (substProj1 s nil m2) (Proj2 idp (Var idp))))

\func to-term {OP : \Set} {P : Type OP -> Type OP -> \Set} {dom cod : Type OP} (m : Mor P dom cod)
  : Term {OP} P dom cod \elim m
  | Id p => Var p
  | MParam p => Param p (Var idp)
  | Comp m1 m2 => subst (to-term m1) (to-term m2)
  | TerminalMap p => unit p
  | TupleMap p m1 m2 => Tuple p (to-term m1) (to-term m2)
  | Proj1Map p => Proj1 p (Var idp)
  | Proj2Map p => Proj2 p (Var idp)
  | LamMap p m => Lam p (to-term m)
  | EvMap {A} p => App (Proj1 p (Var idp)) (Proj2 p (Var idp))

\func substProj1-lemma' {C : CartesianClosedPrecat} {TP : \Set} {P : Type TP -> (Type TP) -> \Set} {tf : TP -> C}
                        {f : \Pi (ctx' : Type TP) -> \Pi (T' : Type TP) -> P ctx' T' -> Hom (IT tf ctx') (IT tf T')}
                        {s mid dom : Type TP} (list : List (Type TP)) (t2 : Term P (BigProd dom list) mid)
  : I tf f t2 `o` I tf f (BigProj1' list) = I tf f (substProj1 s list t2) \elim t2
  | Tuple {A} {B} p t2 t1 => \case \elim mid, \elim p \with {
    | _, idp => rewriteI (substProj1-lemma', substProj1-lemma') C.pair-comp
  }
  | unit p => \case \elim mid, \elim p \with {
    | _, idp => C.terminal-unique
  }
  | Proj1 {S} {TS} p t2 => \let lem => substProj1-lemma' {_} {_} {_} {tf} {f} {s} list t2 \in rewrite (o-assoc, lem) (
    \case \elim TS, \elim p, \elim t2 \with {
      | _, idp, t2' => pmap (C.proj1`o`) idp
    })
  | Proj2 {S} {ST} p t2 => \let lem => substProj1-lemma' {_} {_} {_} {tf} {f} {s} list t2 \in rewrite (o-assoc, lem) (
    \case \elim ST, \elim p, \elim t2 \with {
      | _, idp, t2' => pmap (C.proj2 `o`) idp
    })
  | Param p t2 => o-assoc *> rewrite (substProj1-lemma' list t2) idp
  | Var p => \case \elim mid, \elim p \with {
    | _, idp => id-left
  }
  | App t2 t1 => o-assoc *> pmap (ev `o`) (C.pair-comp *>
  pmap (C.pair _ __ ) (substProj1-lemma' list t1) *> pmap (C.pair __ _ ) (substProj1-lemma' list t2))
  | Lam {s1} p t2 => \case \elim mid, \elim p \with {
    | _, idp => C.exp-comp *> pmap lam (
      \let lam => substProj1-lemma' {_} {_} {_} {tf} {f} {s} (s1 :: list) t2
      \in pmap (I tf f t2 `o`) (C.pair-unique' (pmap (I tf f (BigProj1' list) `o`) (inv C.id-right)
        *> (
             \let x => lemma-subst' {_} {_} {_} {tf} {f} (BigProj1'_ {_}{P}{dom}{s} list)
                 (Proj1{_}{_}{_}{_}{s1} idp (Var idp))
                  | y => rewrite (BigProj1'-lem list) x
                  | z => y *> pmap (I tf f) (inv (substProj1-lemma'' list _ _))
             \in z))
          (C.id-left *> inv C.id-right)) *> lam)
  }

\func substProj1-lemma'' {TP : \Set} {P : Type TP -> (Type TP) -> \Set}
                         {dom0 dom0' dom1 dom2 : Type TP} (list : List (Type TP))
                         (m0 : Term P dom0' dom0) (m : Term P dom0 (BigProd (Prod dom1 dom2) list))
  : BigProj1 list (subst m m0) = subst (BigProj1 list m) m0 \elim list
  | nil => idp
  | :: a list => pmap (Tuple idp __ _) (substProj1-lemma'' list m0 (Proj1 idp m))

\data NotLam {TP : \Set} (P : Type TP -> Type TP -> \Set) (ctx : Type TP) (T : Type TP)
  | Tuple_ {A B : Type TP} (T = Prod A B) (NotLam P ctx A) (NotLam P ctx B)
  | unit_ (T = Unit)
  | Proj1_ {S TS : Type TP} (TS = Prod T S) (NotLam P ctx TS)
  | Proj2_ {S ST : Type TP} (ST = Prod S T) (NotLam P ctx ST)
  | Var_ (T = ctx)

\func toTerm {TP : \Set} {P : Type TP -> Type TP -> \Set} {ctx : Type TP} {T : Type TP} (t : NotLam P ctx T) : Term P ctx T \elim t
  | Tuple_ p t t1 => Tuple p (toTerm t) (toTerm t1)
  | unit_ p => unit p
  | Proj1_ p t => Proj1 p (toTerm t)
  | Proj2_ p t => Proj2 p (toTerm t)
  | Var_ p => Var p

\func BigProj1_ {OP : \Set} {P : Type OP -> Type OP -> \Set} {dom0 dom1 dom2 : Type OP} (list : List (Type OP))
                (m : NotLam P dom0 (BigProd (Prod dom1 dom2) list))
  : NotLam P dom0 (BigProd dom1 list) \elim list
  | nil => Proj1_ idp m
  | :: a list =>
    Tuple_ idp (BigProj1_ list (Proj1_ idp m)) (Proj2_ idp m)

\func BigProj1'_ {OP : \Set} {P : Type OP -> Type OP -> \Set} {dom1 dom2 : Type OP} (list : List (Type OP))
  : NotLam P (BigProd (Prod dom1 dom2) list) (BigProd dom1 list) => BigProj1_ list (Var_ idp)

\func BigProj1-lem {OP : \Set} {P : Type OP -> Type OP -> \Set} {dom0 dom1 dom2 : Type OP} (list : List (Type OP))
                   (m : NotLam P dom0 (BigProd (Prod dom1 dom2) list))
  : toTerm (BigProj1_ list m) = BigProj1 list (toTerm m) \elim list
  | nil => idp
  | :: a list => pmap (Tuple idp __ (Proj2 idp (toTerm m))) (BigProj1-lem list _)

\func BigProj1'-lem {OP : \Set} {P : Type OP -> Type OP -> \Set} {dom1 dom2 : Type OP} (list : List (Type OP))
  : toTerm (BigProj1'_ {_}{P}{dom1}{dom2} list) = BigProj1' list => BigProj1-lem list _

\func lemma-subst' {C : CartesianClosedPrecat} {TP : \Set} {P : Type TP -> (Type TP) -> \Set} {tf : TP -> C}
                   {f : \Pi (ctx' : Type TP) -> \Pi (T' : Type TP) -> P ctx' T' -> Hom (IT tf ctx') (IT tf T')}
                   {dom mid cod : Type TP} (t1 : NotLam P mid cod) (t2 : Term P dom mid)
  : I tf f (toTerm t1) `o` I tf f t2 = I tf f (subst (toTerm t1) t2) \elim t1
  | Tuple_ p t1 t3 => rewriteI (lemma-subst' t1 t2, lemma-subst' t3 t2) (\case \elim cod, \elim p \with {
    | _, idp => C.pair-comp
  })
  | unit_ p => \case \elim cod, \elim p \with {
    | _, idp => C.terminal-unique
  }
  | Var_ p => \case \elim cod, \elim p \with {
    | _, idp => C.id-left
  }
  | Proj1_ p t1 => o-assoc *> rewrite (lemma-subst' t1 t2) idp
  | Proj2_ p t1 => o-assoc *> rewrite (lemma-subst' t1 t2) idp

\func lemma-subst {C : CartesianClosedPrecat} {TP : \Set} {P : Type TP -> (Type TP) -> \Set} {tf : TP -> C}
                  {f : \Pi (ctx' : Type TP) -> \Pi (T' : Type TP) -> P ctx' T' -> Hom (IT tf ctx') (IT tf T')}
                  {dom mid cod : Type TP} (t1 : Term P mid cod) (t2 : Term P dom mid)
  : I tf f t1 `o` I tf f t2 = I tf f (subst t1 t2) \elim t1
  | Tuple p t1 t3 => rewriteI (lemma-subst t1 t2, lemma-subst t3 t2) (\case \elim cod, \elim p \with {
    | _, idp => C.pair-comp
  })
  | unit p => \case \elim cod, \elim p \with {
    | _, idp => C.terminal-unique
  }
  | Var p => \case \elim cod, \elim p \with {
    | _, idp => C.id-left
  }
  | Proj1 p t1 => o-assoc *> rewrite (lemma-subst t1 t2) idp
  | Proj2 p t1 => o-assoc *> rewrite (lemma-subst t1 t2) idp
  | Param p t1 => o-assoc *> rewrite (lemma-subst t1 t2) idp
  | App t1 t3 => rewriteI (lemma-subst t1 t2, lemma-subst t3 t2, C.pair-comp) C.o-assoc
  | Lam {s} {t} p t1 => \case \elim cod, \elim p \with {
    | _, idp => C.exp-comp *> pmap lam (
      \let s1 =>  lemma-subst {_} {_} {_} {tf}{f} t1 (Tuple idp (substProj1 s nil t2) (Proj2 idp (Var idp)))
      \in pmap (I tf f t1 `o`) (C.pair-unique' (pmap (I tf f t2 `o`) (inv C.id-right) *> substProj1-lemma' nil t2) (C.id-left *> inv C.id-right)) *> s1)
  }

\func lemma-to-term {C : CartesianClosedPrecat} {TP : \Set} {P : Type TP -> (Type TP) -> \Set} {tf : TP -> C}
                    {f : \Pi (ctx' : Type TP) -> \Pi (T' : Type TP) -> P ctx' T' -> Hom (IT tf ctx') (IT tf T')}
                    {dom cod : Type TP} (m : Mor P dom cod) : IM tf f m = I tf f (to-term m) \elim m
  | Id p => idp
  | MParam p => inv C.id-right
  | Comp m1 m2 => rewrite (lemma-to-term m1, lemma-to-term m2) (lemma-subst (to-term m1) (to-term m2))
  | TerminalMap p => idp
  | TupleMap p m1 m2 => rewrite (lemma-to-term m1, lemma-to-term m2) idp
  | Proj1Map p => inv C.id-right
  | Proj2Map p => inv C.id-right
  | LamMap p m => rewrite (lemma-to-term m) idp
  | EvMap p => \case \elim dom, \elim p \with {
    | _, idp => rewrite (C.id-right, C.id-right, C.pair-proj) (inv C.id-right)
  }


\func eta-long {OP : \Set} {P : Type OP -> Type OP -> \Set} {dom cod : Type OP} (t : Term P dom cod) : Term P dom cod \elim cod, t
  | TParam p, Tuple p1 t1 t2 => \case p1
  | TParam p, unit p1 => \case p1
  | TParam p, Proj1 p1 t => Proj1 p1 (eta-long-skip t)
  | TParam p, Proj2 p1 t => Proj2 p1 (eta-long-skip t)
  | TParam p, Param p1 t => Param p1 (eta-long t)
  | TParam p, Var p1 => Var p1
  | TParam p, Lam p1 t1 => \case p1
  | TParam p, App t1 t2 => App (eta-long-skip t1) (eta-long t2)
  | Unit, t => unit idp
  | Prod cod1 cod2, Tuple p t1 t2 => Tuple p (eta-long t1) (eta-long t2)
  | Prod cod1 cod2, t => Tuple idp (Proj1 idp (eta-long-skip t)) (Proj2 idp (eta-long-skip t))
  | Arr cod1 cod2, Tuple p t1 t2 => \case p
  | Arr cod1 cod2, unit p => \case p
  | Arr cod1 cod2, Lam p t1 => Lam p (eta-long t1)
  | Arr cod1 cod2, t => Lam idp (App (substProj1 cod1 nil (eta-long-skip t)) (Proj2 idp (Var idp)))

\func eta-long-skip {OP : \Set} {P : Type OP -> Type OP -> \Set} {dom cod : Type OP} (t : Term P dom cod) : Term P dom cod \elim t
  | Proj1 p1 t => Proj1 p1 (eta-long-skip t)
  | Proj2 p1 t => Proj2 p1 (eta-long-skip t)
  | Param p1 t => Param p1 (eta-long t)
  | Var p1 => Var p1
  | Tuple p t1 t2 => Tuple p (eta-long t1) (eta-long t2)
  | unit p => unit p
  | Lam p t1 => Lam p (eta-long t1)
  | App t1 t2 => App (eta-long-skip t1) (eta-long t2)

\func lemma-eta {C : CartesianClosedPrecat} {TP : \Set} {P : Type TP -> (Type TP) -> \Set} {tf : TP -> C}
                {f : \Pi (ctx' : Type TP) -> \Pi (T' : Type TP) -> P ctx' T' -> Hom (IT tf ctx') (IT tf T')}
                {dom cod : Type TP} (t : Term P dom cod) : I tf f t = I tf f (eta-long t) \elim cod, t
  | TParam p, Tuple p1 t1 t2 => \case p1
  | TParam p, unit p1 => \case p1
  | TParam p, Proj1 p1 t => rewrite (lemma-eta-skip t) idp
  | TParam p, Proj2 p1 t => rewrite (lemma-eta-skip t) idp
  | TParam p, Param p1 t => rewrite (lemma-eta t) idp
  | TParam p, Var p1 => idp
  | TParam p, Lam p1 t1 => \case p1
  | TParam p, App t1 t2 => rewrite (lemma-eta-skip t1, lemma-eta t2) idp
  | Unit, t => C.terminal-unique
  | Prod cod1 cod2, Tuple p t1 t2 => rewrite (lemma-eta t1, lemma-eta t2) idp
  | Arr cod1 cod2, Tuple p t1 t2 => \case p
  | Arr cod1 cod2, unit p => \case p
  | Arr cod1 cod2, Lam p t1 => rewrite (lemma-eta t1) idp
  | Prod cod cod1, unit p => \case p
  | Prod cod cod1, Proj1 p t => rewrite (lemma-eta-skip t, inv C.pair-comp, C.pair-proj) (inv C.id-left)
  | Prod cod cod1, Proj2 p t => rewrite (lemma-eta-skip t, inv C.pair-comp, C.pair-proj) (inv C.id-left)
  | Prod cod cod1, Param p t => rewrite (lemma-eta t, inv C.pair-comp, C.pair-proj) (inv C.id-left)
  | Prod cod cod1, Var p => rewrite (inv C.pair-comp, C.pair-proj) (inv C.id-left)
  | Prod cod cod1, App t1 t2 => rewrite (lemma-eta-skip t1, lemma-eta t2, inv C.pair-comp, C.pair-proj, C.id-left) idp
  | Prod cod cod1, Lam p t1 => \case p
  | Arr cod1 cod2, Proj1 {S} {TS} p t => rewrite (lemma-eta-skip t) (\case \elim TS, \elim p, \elim t \with {
    | _, idp, t => rewriteI (substProj1-lemma' nil (eta-long-skip t), o-assoc, inv id-right, inv id-right)
        (C.lam-uniq (unfold CartesianPrecat.prodMap (rewrite id-left idp)))
  })
  | Arr cod1 cod2, Proj2 {S} {ST} p t => rewrite (lemma-eta-skip t) (\case \elim ST, \elim p, \elim t \with {
    | _, idp, t => rewriteI (substProj1-lemma' nil (eta-long-skip t), o-assoc, inv id-right, inv id-right)
        (C.lam-uniq (unfold CartesianPrecat.prodMap (rewrite id-left idp)))
  })
  | Arr cod1 cod2, Param {d} p t => C.lam-uniq (unfold CartesianPrecat.prodMap (pmap (ev `o`)
      (C.pair-unique' (C.o-assoc *> pmap (f d (Arr cod1 cod2) p âˆ˜)
                                        ((pmap (__ `o` C.proj1) (lemma-eta t) *> inv id-right *> o-assoc)
                                          *> substProj1-lemma' nil (eta-long t)))
          C.id-left *> inv C.id-right) *> rewrite {1} C.id-right (rewrite {1} C.id-right idp)))
  | Arr cod1 cod2, Var p => \case \elim dom, \elim p \with {
  | _, idp => rewrite (C.id-right, C.id-right, C.pair-proj, C.id-right) C.lam-id
}
  | Arr cod cod1, App t1 t2 => rewrite (lemma-eta-skip t1, lemma-eta t2, inv (substProj1-lemma' nil (eta-long-skip t1)),
                                        inv (substProj1-lemma' nil (eta-long t2)), inv C.pair-comp, inv C.o-assoc, C.id-right, C.id-right) C.lam-lemma'

\func lemma-eta-skip {C : CartesianClosedPrecat} {TP : \Set} {P : Type TP -> (Type TP) -> \Set} {tf : TP -> C}
                 {f : \Pi (ctx' : Type TP) -> \Pi (T' : Type TP) -> P ctx' T' -> Hom (IT tf ctx') (IT tf T')}
                 {dom cod : Type TP} (t : Term P dom cod) : I tf f t = I tf f (eta-long-skip t) \elim t
  | Proj1 p1 t => rewrite (lemma-eta-skip t) idp
  | Proj2 p1 t => rewrite (lemma-eta-skip t) idp
  | Param p1 t => rewrite (lemma-eta t) idp
  | Var p1 => idp
  | Tuple p t1 t2 => rewrite (lemma-eta t1, lemma-eta t2) idp
  | unit p => idp
  | Lam p t1 => rewrite (lemma-eta t1) idp
  | App t1 t2 => rewrite (lemma-eta-skip t1, lemma-eta t2) idp


\func proj1-type {OP : \Set} {A B AB : Type OP} (p : AB = Prod A B) : Type OP \elim AB
  | Prod AB1 AB2 => AB1

\func proj1-eq {OP : \Set} {A B AB : Type OP} (p : AB = Prod A B) : A = proj1-type p \elim p
  | idp => idp

\func proj2-type {OP : \Set} {A B AB : Type OP} (p : AB = Prod A B) : Type OP \elim AB
  | Prod AB1 AB2 => AB2

\func proj2-eq {OP : \Set} {A B AB : Type OP} (p : AB = Prod A B) : B = proj2-type p \elim p
  | idp => idp

\func arr2-type {OP : \Set} {A B AB : Type OP} (p : AB = Arr A B) : Type OP \elim AB
  | Arr AB1 AB2 => AB2

\func arr2-eq {OP : \Set} {A B AB : Type OP} (p : AB = Arr A B) : arr2-type p = B \elim p
  | idp => idp

\func arr1-type {OP : \Set} {A B AB : Type OP} (p : AB = Arr A B) : Type OP \elim AB
  | Arr AB1 AB2 => AB1

\func arr1-eq {OP : \Set} {A B AB : Type OP} (p : AB = Arr A B) : arr1-type p = A \elim p
  | idp => idp

\func normalize-beta {OP : \Set} {P : Type OP -> Type OP -> \Set} {dom cod : Type OP} (t : Term P dom cod) : Term P dom cod \elim t
  | Tuple p t1 t2 => Tuple p (normalize-beta t1) (normalize-beta t2)
  | Param p t => Param p (normalize-beta t)
  | Proj1 p t => \case (normalize-beta t) \with {
    | Tuple p1 t'1 t'2 => rewriteI (proj1-eq (inv p *> p1)) t'1
    | t' => Proj1 p t'
  }
  | Proj2 p t => \case (normalize-beta t) \with {
    | Tuple p1 t'1 t'2 => rewriteI (proj2-eq (inv p *> p1)) t'2
    | t' => Proj2 p t'
  }
  | unit p => unit p
  | Var p => Var p
  | App t1 t2 => \case (normalize-beta t1) \with {
    | Lam p t => rewrite (arr2-eq p)
        (subst t (rewriteI (arr1-eq p) (Tuple idp (Var idp) (normalize-beta t2))))
    | t' => App t' (normalize-beta t2)
  }
  | Lam p t1 => Lam p (normalize-beta t1)

\func eq-pair {TP : \Set} {A B A' B' : Type TP} (pA : A = A') (pB : B = B') : Prod A B = Prod A' B' =>
  rewrite (pA, pB) idp

\func eq-pair-lemma {TP : \Set} {A B A' B' : Type TP} (p : Prod A B = Prod A' B')
  : p = eq-pair (proj1-eq (inv p)) (proj2-eq (inv p)) => Path.inProp _ _

\func lemma-pair-transport-1 {C : CartesianClosedPrecat} {TP : \Set} {P : Type TP -> (Type TP) -> \Set} {tf : TP -> C}
                             {f : \Pi (ctx' : Type TP) -> \Pi (T' : Type TP) -> P ctx' T' -> Hom (IT tf ctx') (IT tf T')}
                             {dom A A' B B' : Type TP} (pA : A = A') (pB : B = B') (t1 : Term P dom A) (t2 : Term P dom B)
  : transportInv (\lam x => Hom (IT tf x) (IT tf A')) (eq-pair pA pB) C.proj1 `o`C.pair (I tf f t1) (I tf f t2)
  = transport (\lam x => Hom (IT tf dom) (IT tf x)) pA (I tf f t1) \elim pA, pB
  | idp, idp => C.beta1 _ _

\func lemma-pair-transport-2 {C : CartesianClosedPrecat} {TP : \Set} {P : Type TP -> (Type TP) -> \Set} {tf : TP -> C}
                             {f : \Pi (ctx' : Type TP) -> \Pi (T' : Type TP) -> P ctx' T' -> Hom (IT tf ctx') (IT tf T')}
                             {dom A A' B B' : Type TP} (pA : A = A') (pB : B = B') (t1 : Term P dom A) (t2 : Term P dom B)
  : transportInv (\lam x => Hom (IT tf x) (IT tf B')) (eq-pair pA pB) C.proj2 `o`C.pair (I tf f t1) (I tf f t2)
  = transport (\lam x => Hom (IT tf dom) (IT tf x)) pB (I tf f t2) \elim pA, pB
  | idp, idp => C.beta2 _ _

\func lemma-proj-1 {C : CartesianClosedPrecat} {TP : \Set} {P : Type TP -> (Type TP) -> \Set} {tf : TP -> C}
                   {f : \Pi (ctx' : Type TP) -> \Pi (T' : Type TP) -> P ctx' T' -> Hom (IT tf ctx') (IT tf T')}
                   {dom cod S TS A B : Type TP} {p : TS = Prod cod S} {p1 : TS = Prod A B}
                   {t1 : Term P dom A} {t2 : Term P dom B}
  : transportInv (\lam x0 => Hom (IT tf x0) (IT tf cod)) p CartesianPrecat.proj1 âˆ˜
transportInv (\lam x0 => Hom (IT tf dom) (IT tf x0)) p1 (CartesianPrecat.pair (I tf f t1) (I tf f t2))
  = transport (\lam x => Hom (IT tf dom) (IT tf x)) (proj1-eq (inv p *> p1)) (I tf f t1) \elim p1
  | idp =>
    \let pA => proj1-eq (inv p) | pB => proj2-eq (inv p) | s => eq-pair-lemma p
         | s1 => lemma-pair-transport-1 {C} {TP} {P} {tf} {f} pA pB t1 t2
    \in transport (\lam x => transportInv (\lam x0 => Hom (IT tf x0) (IT tf cod)) x C.proj1 âˆ˜ C.pair (I tf f t1) (I tf f t2)
      = transport (\lam x0 => Hom (IT tf dom) (IT tf x0)) (proj1-eq (inv p)) (I tf f t1)) (inv s) s1

\func lemma-proj-2 {C : CartesianClosedPrecat} {TP : \Set} {P : Type TP -> (Type TP) -> \Set} {tf : TP -> C}
                   {f : \Pi (ctx' : Type TP) -> \Pi (T' : Type TP) -> P ctx' T' -> Hom (IT tf ctx') (IT tf T')}
                   {dom cod S TS A B : Type TP} {p : TS = Prod S cod} {p1 : TS = Prod A B}
                   {t1 : Term P dom A} {t2 : Term P dom B}
  : transportInv (\lam x0 => Hom (IT tf x0) (IT tf cod)) p CartesianPrecat.proj2 âˆ˜
transportInv (\lam x0 => Hom (IT tf dom) (IT tf x0)) p1 (CartesianPrecat.pair (I tf f t1) (I tf f t2))
  = transport (\lam x => Hom (IT tf dom) (IT tf x)) (proj2-eq (inv p *> p1)) (I tf f t2) \elim p1
  | idp =>
    \let pA => proj1-eq (inv p) | pB => proj2-eq (inv p) | s => eq-pair-lemma p
         | s1 => lemma-pair-transport-2 {C} {TP} {P} {tf} {f} pA pB t1 t2
         | s2 => transport (\lam x => transportInv (\lam x0 => Hom (IT tf x0) (IT tf cod)) x C.proj2 âˆ˜ C.pair (I tf f t1) (I tf f t2)
           = transport (\lam x0 => Hom (IT tf dom) (IT tf x0)) (proj2-eq (inv p)) (I tf f t2)) (inv s) s1 \in s2

\func lemma1  {C : CartesianClosedPrecat} {TP : \Set} {P : Type TP -> (Type TP) -> \Set} {tf : TP -> C}
              {f : \Pi (ctx' : Type TP) -> \Pi (T' : Type TP) -> P ctx' T' -> Hom (IT tf ctx') (IT tf T')}
              {dom cod cod' : Type TP} {p : cod = cod'} {t : Term P dom cod}
  : I tf f (transport (\lam x => Term P dom x) p t) = transport (\lam x => Hom (IT tf dom) (IT tf x)) p (I tf f t) \elim p
  | idp => idp

\func eq-arr {TP : \Set} {A B A' B' : Type TP} (pA : A = A') (pB : B = B') : Arr A B = Arr A' B' =>
  rewrite (pA, pB) idp

\func eq-arr-lemma {TP : \Set} {A B A' B' : Type TP} (p : Arr A B = Arr A' B')
  : p = eq-arr (arr1-eq p) (arr2-eq p) => Path.inProp _ _

\func lemma-arr1 {C : CartesianClosedPrecat} {TP : \Set} {P : Type TP -> (Type TP) -> \Set} {tf : TP -> C}
                 {f : \Pi (ctx' : Type TP) -> \Pi (T' : Type TP) -> P ctx' T' -> Hom (IT tf ctx') (IT tf T')}
                 {dom mid cod s t : Type TP} (t1 : Term P dom (Arr mid cod)) (t2 : Term P dom mid)
                 (p : mid = s) (q : cod = t) (x : Term P (Prod dom s) t) (p1 : normalize-beta t1 = Lam (eq-arr p q) x)
                 (l1 : I tf f t1 = I tf f (normalize-beta t1)) (l2 : I tf f t2 = I tf f (normalize-beta t2))
  : ev âˆ˜ CartesianPrecat.pair (I tf f t1) (I tf f t2) = I tf f (transportInv (Term P dom) q
    (subst x (transport (\lam x0 => Term P dom (Prod dom x0)) p (Tuple idp (Var idp) (normalize-beta t2)))))\elim p, q
  | idp, idp => rewrite (l1, p1, inv (lemma-subst _ _)) (C.lam-lemma *> pmap (I tf f x `o`) (C.pair-unique' idp l2))

\func lemma-beta {C : CartesianClosedPrecat} {TP : \Set} {P : Type TP -> (Type TP) -> \Set} {tf : TP -> C}
                 {f : \Pi (ctx' : Type TP) -> \Pi (T' : Type TP) -> P ctx' T' -> Hom (IT tf ctx') (IT tf T')}
                 {dom cod : Type TP} (t : Term P dom cod) : I tf f t = I tf f (normalize-beta t) \elim t
  | Tuple p t1 t2 => rewrite (lemma-beta t1, lemma-beta t2) idp
  | unit p => idp
  | Proj1 {S} {TS} p t => cases (normalize-beta t arg addPath) \with {
    | Tuple p1 t1 t2, q => rewrite (lemma-beta t, q, lemma1) lemma-proj-1
    | Proj1 p1 x, q => rewrite (lemma-beta t, q) idp
    | Proj2 p1 x, q => rewrite (lemma-beta t, q) idp
    | Param p1 x, q => rewrite (lemma-beta t, q) idp
    | Var p1, q => rewrite (lemma-beta t, q) idp
    | unit p1, q => rewrite (lemma-beta t, q) idp
    | App x1 x2, p1 => rewrite (lemma-beta t, p1) (\case \elim TS, \elim p, \elim t, \elim x1 \with{
      | _, idp, t1, x1 => idp
    })
    | Lam p1 x, p2 => \case inv p *> p1
  }
  | Proj2 {S} {ST} p t => cases (normalize-beta t arg addPath) \with {
    | Tuple p1 t1 t2, q => rewrite (lemma-beta t, q, lemma1) lemma-proj-2
    | Proj1 p1 x, q => rewrite (lemma-beta t, q) idp
    | Proj2 p1 x, q => rewrite (lemma-beta t, q) idp
    | Param p1 x, q => rewrite (lemma-beta t, q) idp
    | Var p1, q => rewrite (lemma-beta t, q) idp
    | unit p1, q => rewrite (lemma-beta t, q) idp
    | App x1 x2, p1 => rewrite (lemma-beta t, p1) (\case \elim ST, \elim p, \elim t, \elim x1 \with{
      | _, idp, t1, x1 => idp
    })
    | Lam p1 x, p2 => \case inv p *> p1
  }
  | Param p t => rewrite (lemma-beta t) idp
  | Var p => idp
  | App t1 t2 => cases (normalize-beta t1 arg addPath) \with {
    | Tuple p x1 x2, p1 => \case p
    | unit p, p1 => \case p
    | Proj1 p x, p1 => rewrite (lemma-beta t1, p1) (pmap (ev `o`) (C.pair-unique' idp (lemma-beta t2)))
    | Proj2 p x, p1 => rewrite (lemma-beta t1, p1) (pmap (ev `o`) (C.pair-unique' idp (lemma-beta t2)))
    | Param p x, p1 => rewrite (lemma-beta t1, p1) (pmap (ev `o`) (C.pair-unique' idp (lemma-beta t2)))
    | Var p, p1 => rewrite (lemma-beta t1, p1) (pmap (ev `o`) (C.pair-unique' idp (lemma-beta t2)))
    | App x1 x2, p => rewrite (lemma-beta t1, p) (pmap (ev `o`) (C.pair-unique' idp (lemma-beta t2)))
    | Lam p x, p1 =>
      \let p2 => rewrite (eq-arr-lemma p) p1
      \in lemma-arr1 {_} {_} {_}{tf}{f} t1 t2 (arr1-eq p) (arr2-eq p) x p2 (lemma-beta t1) (lemma-beta t2)
  }
  | Lam p t1 => rewrite (lemma-beta t1) (\case \elim cod, \elim p \with {
    | _, idp => idp
  })
